// Copyright 2024 Neurouter Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v3.21.12
// source: conf/upstream.proto

package conf

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Modality defines the types of input/output the model can handle.
type Modality int32

const (
	Modality_MODALITY_UNSPECIFIED Modality = 0
	Modality_MODALITY_TEXT        Modality = 1
	Modality_MODALITY_IMAGE       Modality = 2
	Modality_MODALITY_AUDIO       Modality = 3
	Modality_MODALITY_VIDEO       Modality = 4
)

// Enum value maps for Modality.
var (
	Modality_name = map[int32]string{
		0: "MODALITY_UNSPECIFIED",
		1: "MODALITY_TEXT",
		2: "MODALITY_IMAGE",
		3: "MODALITY_AUDIO",
		4: "MODALITY_VIDEO",
	}
	Modality_value = map[string]int32{
		"MODALITY_UNSPECIFIED": 0,
		"MODALITY_TEXT":        1,
		"MODALITY_IMAGE":       2,
		"MODALITY_AUDIO":       3,
		"MODALITY_VIDEO":       4,
	}
)

func (x Modality) Enum() *Modality {
	p := new(Modality)
	*p = x
	return p
}

func (x Modality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Modality) Descriptor() protoreflect.EnumDescriptor {
	return file_conf_upstream_proto_enumTypes[0].Descriptor()
}

func (Modality) Type() protoreflect.EnumType {
	return &file_conf_upstream_proto_enumTypes[0]
}

func (x Modality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Modality.Descriptor instead.
func (Modality) EnumDescriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{0}
}

// Capability defines what the model can do.
type Capability int32

const (
	Capability_CAPABILITY_UNSPECIFIED Capability = 0
	Capability_CAPABILITY_CHAT        Capability = 1
	Capability_CAPABILITY_COMPLETION  Capability = 2
	Capability_CAPABILITY_EMBEDDING   Capability = 3
)

// Enum value maps for Capability.
var (
	Capability_name = map[int32]string{
		0: "CAPABILITY_UNSPECIFIED",
		1: "CAPABILITY_CHAT",
		2: "CAPABILITY_COMPLETION",
		3: "CAPABILITY_EMBEDDING",
	}
	Capability_value = map[string]int32{
		"CAPABILITY_UNSPECIFIED": 0,
		"CAPABILITY_CHAT":        1,
		"CAPABILITY_COMPLETION":  2,
		"CAPABILITY_EMBEDDING":   3,
	}
)

func (x Capability) Enum() *Capability {
	p := new(Capability)
	*p = x
	return p
}

func (x Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_conf_upstream_proto_enumTypes[1].Descriptor()
}

func (Capability) Type() protoreflect.EnumType {
	return &file_conf_upstream_proto_enumTypes[1]
}

func (x Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capability.Descriptor instead.
func (Capability) EnumDescriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{1}
}

type Upstream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*UpstreamConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *Upstream) Reset() {
	*x = Upstream{}
	mi := &file_conf_upstream_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Upstream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upstream) ProtoMessage() {}

func (x *Upstream) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upstream.ProtoReflect.Descriptor instead.
func (*Upstream) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{0}
}

func (x *Upstream) GetConfigs() []*UpstreamConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type UpstreamConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Models []*Model `protobuf:"bytes,2,rep,name=models,proto3" json:"models,omitempty"`
	// Types that are assignable to Config:
	//
	//	*UpstreamConfig_Neurouter
	//	*UpstreamConfig_OpenAi
	//	*UpstreamConfig_Google
	//	*UpstreamConfig_Anthropic
	//	*UpstreamConfig_DeepSeek
	Config isUpstreamConfig_Config `protobuf_oneof:"config"`
}

func (x *UpstreamConfig) Reset() {
	*x = UpstreamConfig{}
	mi := &file_conf_upstream_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpstreamConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpstreamConfig) ProtoMessage() {}

func (x *UpstreamConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpstreamConfig.ProtoReflect.Descriptor instead.
func (*UpstreamConfig) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{1}
}

func (x *UpstreamConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpstreamConfig) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (m *UpstreamConfig) GetConfig() isUpstreamConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *UpstreamConfig) GetNeurouter() *NeurouterConfig {
	if x, ok := x.GetConfig().(*UpstreamConfig_Neurouter); ok {
		return x.Neurouter
	}
	return nil
}

func (x *UpstreamConfig) GetOpenAi() *OpenAIConfig {
	if x, ok := x.GetConfig().(*UpstreamConfig_OpenAi); ok {
		return x.OpenAi
	}
	return nil
}

func (x *UpstreamConfig) GetGoogle() *GoogleConfig {
	if x, ok := x.GetConfig().(*UpstreamConfig_Google); ok {
		return x.Google
	}
	return nil
}

func (x *UpstreamConfig) GetAnthropic() *AnthropicConfig {
	if x, ok := x.GetConfig().(*UpstreamConfig_Anthropic); ok {
		return x.Anthropic
	}
	return nil
}

func (x *UpstreamConfig) GetDeepSeek() *DeepSeekConfig {
	if x, ok := x.GetConfig().(*UpstreamConfig_DeepSeek); ok {
		return x.DeepSeek
	}
	return nil
}

type isUpstreamConfig_Config interface {
	isUpstreamConfig_Config()
}

type UpstreamConfig_Neurouter struct {
	Neurouter *NeurouterConfig `protobuf:"bytes,100,opt,name=neurouter,proto3,oneof"`
}

type UpstreamConfig_OpenAi struct {
	OpenAi *OpenAIConfig `protobuf:"bytes,101,opt,name=open_ai,json=openAi,proto3,oneof"`
}

type UpstreamConfig_Google struct {
	Google *GoogleConfig `protobuf:"bytes,102,opt,name=google,proto3,oneof"`
}

type UpstreamConfig_Anthropic struct {
	Anthropic *AnthropicConfig `protobuf:"bytes,103,opt,name=anthropic,proto3,oneof"`
}

type UpstreamConfig_DeepSeek struct {
	DeepSeek *DeepSeekConfig `protobuf:"bytes,104,opt,name=deep_seek,json=deepSeek,proto3,oneof"`
}

func (*UpstreamConfig_Neurouter) isUpstreamConfig_Config() {}

func (*UpstreamConfig_OpenAi) isUpstreamConfig_Config() {}

func (*UpstreamConfig_Google) isUpstreamConfig_Config() {}

func (*UpstreamConfig_Anthropic) isUpstreamConfig_Config() {}

func (*UpstreamConfig_DeepSeek) isUpstreamConfig_Config() {}

type Model struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the model.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The unique identifier of the model in the upstream.
	UpstreamId string `protobuf:"bytes,2,opt,name=upstream_id,json=upstreamId,proto3" json:"upstream_id,omitempty"`
	// The display name of the model.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The entity that owns the model.
	From string `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	// The model service provider.
	Provider string `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	// The modalities supported by the model.
	Modalities []Modality `protobuf:"varint,6,rep,packed,name=modalities,proto3,enum=neurouter.config.v1.Modality" json:"modalities,omitempty"`
	// The capabilities of the model.
	Capabilities []Capability `protobuf:"varint,7,rep,packed,name=capabilities,proto3,enum=neurouter.config.v1.Capability" json:"capabilities,omitempty"`
}

func (x *Model) Reset() {
	*x = Model{}
	mi := &file_conf_upstream_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{2}
}

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetUpstreamId() string {
	if x != nil {
		return x.UpstreamId
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Model) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Model) GetModalities() []Modality {
	if x != nil {
		return x.Modalities
	}
	return nil
}

func (x *Model) GetCapabilities() []Capability {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type NeurouterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint string `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *NeurouterConfig) Reset() {
	*x = NeurouterConfig{}
	mi := &file_conf_upstream_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NeurouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NeurouterConfig) ProtoMessage() {}

func (x *NeurouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NeurouterConfig.ProtoReflect.Descriptor instead.
func (*NeurouterConfig) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{3}
}

func (x *NeurouterConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type OpenAIConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey                          string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	BaseUrl                         string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	PreferStringContentForSystem    bool   `protobuf:"varint,3,opt,name=prefer_string_content_for_system,json=preferStringContentForSystem,proto3" json:"prefer_string_content_for_system,omitempty"`
	PreferStringContentForUser      bool   `protobuf:"varint,4,opt,name=prefer_string_content_for_user,json=preferStringContentForUser,proto3" json:"prefer_string_content_for_user,omitempty"`
	PreferStringContentForAssistant bool   `protobuf:"varint,5,opt,name=prefer_string_content_for_assistant,json=preferStringContentForAssistant,proto3" json:"prefer_string_content_for_assistant,omitempty"`
	PreferStringContentForTool      bool   `protobuf:"varint,6,opt,name=prefer_string_content_for_tool,json=preferStringContentForTool,proto3" json:"prefer_string_content_for_tool,omitempty"`
	PreferSinglePartContent         bool   `protobuf:"varint,7,opt,name=prefer_single_part_content,json=preferSinglePartContent,proto3" json:"prefer_single_part_content,omitempty"`
}

func (x *OpenAIConfig) Reset() {
	*x = OpenAIConfig{}
	mi := &file_conf_upstream_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OpenAIConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenAIConfig) ProtoMessage() {}

func (x *OpenAIConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenAIConfig.ProtoReflect.Descriptor instead.
func (*OpenAIConfig) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{4}
}

func (x *OpenAIConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *OpenAIConfig) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *OpenAIConfig) GetPreferStringContentForSystem() bool {
	if x != nil {
		return x.PreferStringContentForSystem
	}
	return false
}

func (x *OpenAIConfig) GetPreferStringContentForUser() bool {
	if x != nil {
		return x.PreferStringContentForUser
	}
	return false
}

func (x *OpenAIConfig) GetPreferStringContentForAssistant() bool {
	if x != nil {
		return x.PreferStringContentForAssistant
	}
	return false
}

func (x *OpenAIConfig) GetPreferStringContentForTool() bool {
	if x != nil {
		return x.PreferStringContentForTool
	}
	return false
}

func (x *OpenAIConfig) GetPreferSinglePartContent() bool {
	if x != nil {
		return x.PreferSinglePartContent
	}
	return false
}

type GoogleConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
}

func (x *GoogleConfig) Reset() {
	*x = GoogleConfig{}
	mi := &file_conf_upstream_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GoogleConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoogleConfig) ProtoMessage() {}

func (x *GoogleConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoogleConfig.ProtoReflect.Descriptor instead.
func (*GoogleConfig) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{5}
}

func (x *GoogleConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

type AnthropicConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey  string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
	// Whether to merge the system prompt into messages
	MergeSystem bool `protobuf:"varint,3,opt,name=merge_system,json=mergeSystem,proto3" json:"merge_system,omitempty"`
}

func (x *AnthropicConfig) Reset() {
	*x = AnthropicConfig{}
	mi := &file_conf_upstream_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnthropicConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnthropicConfig) ProtoMessage() {}

func (x *AnthropicConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnthropicConfig.ProtoReflect.Descriptor instead.
func (*AnthropicConfig) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{6}
}

func (x *AnthropicConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *AnthropicConfig) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

func (x *AnthropicConfig) GetMergeSystem() bool {
	if x != nil {
		return x.MergeSystem
	}
	return false
}

type DeepSeekConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiKey  string `protobuf:"bytes,1,opt,name=api_key,json=apiKey,proto3" json:"api_key,omitempty"`
	BaseUrl string `protobuf:"bytes,2,opt,name=base_url,json=baseUrl,proto3" json:"base_url,omitempty"`
}

func (x *DeepSeekConfig) Reset() {
	*x = DeepSeekConfig{}
	mi := &file_conf_upstream_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeepSeekConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeepSeekConfig) ProtoMessage() {}

func (x *DeepSeekConfig) ProtoReflect() protoreflect.Message {
	mi := &file_conf_upstream_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeepSeekConfig.ProtoReflect.Descriptor instead.
func (*DeepSeekConfig) Descriptor() ([]byte, []int) {
	return file_conf_upstream_proto_rawDescGZIP(), []int{7}
}

func (x *DeepSeekConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *DeepSeekConfig) GetBaseUrl() string {
	if x != nil {
		return x.BaseUrl
	}
	return ""
}

var File_conf_upstream_proto protoreflect.FileDescriptor

var file_conf_upstream_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x2f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x22, 0x49, 0x0a, 0x08, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x0e, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6e,
	0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x44, 0x0a, 0x09, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x75, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x65, 0x75,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x61,
	0x69, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70,
	0x65, 0x6e, 0x41, 0x69, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x18, 0x66,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x12, 0x44, 0x0a, 0x09, 0x61, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e, 0x74, 0x68, 0x72,
	0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e,
	0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x42, 0x0a, 0x09, 0x64, 0x65, 0x65, 0x70, 0x5f,
	0x73, 0x65, 0x65, 0x6b, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x75,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x65, 0x70, 0x53, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x65, 0x65, 0x70, 0x53, 0x65, 0x65, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x80, 0x02, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x75, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x75, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x0f, 0x4e, 0x65, 0x75, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x9d, 0x03, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e,
	0x41, 0x49, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65,
	0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x46, 0x0a, 0x20,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x6f,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x23, 0x70, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x41, 0x73, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x1e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x1a, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79,
	0x22, 0x68, 0x0a, 0x0f, 0x41, 0x6e, 0x74, 0x68, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x44, 0x0a, 0x0e, 0x44, 0x65,
	0x65, 0x70, 0x53, 0x65, 0x65, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07,
	0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x73, 0x65, 0x55, 0x72, 0x6c,
	0x2a, 0x73, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x14,
	0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44,
	0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a,
	0x0e, 0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x56, 0x49,
	0x44, 0x45, 0x4f, 0x10, 0x04, 0x2a, 0x72, 0x0a, 0x0a, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x43, 0x48,
	0x41, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49,
	0x54, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x43, 0x41, 0x50, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x4d,
	0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x75, 0x72, 0x61, 0x78, 0x65, 0x73,
	0x2f, 0x6e, 0x65, 0x75, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_conf_upstream_proto_rawDescOnce sync.Once
	file_conf_upstream_proto_rawDescData = file_conf_upstream_proto_rawDesc
)

func file_conf_upstream_proto_rawDescGZIP() []byte {
	file_conf_upstream_proto_rawDescOnce.Do(func() {
		file_conf_upstream_proto_rawDescData = protoimpl.X.CompressGZIP(file_conf_upstream_proto_rawDescData)
	})
	return file_conf_upstream_proto_rawDescData
}

var file_conf_upstream_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_conf_upstream_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_conf_upstream_proto_goTypes = []any{
	(Modality)(0),           // 0: neurouter.config.v1.Modality
	(Capability)(0),         // 1: neurouter.config.v1.Capability
	(*Upstream)(nil),        // 2: neurouter.config.v1.Upstream
	(*UpstreamConfig)(nil),  // 3: neurouter.config.v1.UpstreamConfig
	(*Model)(nil),           // 4: neurouter.config.v1.Model
	(*NeurouterConfig)(nil), // 5: neurouter.config.v1.NeurouterConfig
	(*OpenAIConfig)(nil),    // 6: neurouter.config.v1.OpenAIConfig
	(*GoogleConfig)(nil),    // 7: neurouter.config.v1.GoogleConfig
	(*AnthropicConfig)(nil), // 8: neurouter.config.v1.AnthropicConfig
	(*DeepSeekConfig)(nil),  // 9: neurouter.config.v1.DeepSeekConfig
}
var file_conf_upstream_proto_depIdxs = []int32{
	3, // 0: neurouter.config.v1.Upstream.configs:type_name -> neurouter.config.v1.UpstreamConfig
	4, // 1: neurouter.config.v1.UpstreamConfig.models:type_name -> neurouter.config.v1.Model
	5, // 2: neurouter.config.v1.UpstreamConfig.neurouter:type_name -> neurouter.config.v1.NeurouterConfig
	6, // 3: neurouter.config.v1.UpstreamConfig.open_ai:type_name -> neurouter.config.v1.OpenAIConfig
	7, // 4: neurouter.config.v1.UpstreamConfig.google:type_name -> neurouter.config.v1.GoogleConfig
	8, // 5: neurouter.config.v1.UpstreamConfig.anthropic:type_name -> neurouter.config.v1.AnthropicConfig
	9, // 6: neurouter.config.v1.UpstreamConfig.deep_seek:type_name -> neurouter.config.v1.DeepSeekConfig
	0, // 7: neurouter.config.v1.Model.modalities:type_name -> neurouter.config.v1.Modality
	1, // 8: neurouter.config.v1.Model.capabilities:type_name -> neurouter.config.v1.Capability
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_conf_upstream_proto_init() }
func file_conf_upstream_proto_init() {
	if File_conf_upstream_proto != nil {
		return
	}
	file_conf_upstream_proto_msgTypes[1].OneofWrappers = []any{
		(*UpstreamConfig_Neurouter)(nil),
		(*UpstreamConfig_OpenAi)(nil),
		(*UpstreamConfig_Google)(nil),
		(*UpstreamConfig_Anthropic)(nil),
		(*UpstreamConfig_DeepSeek)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_conf_upstream_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_conf_upstream_proto_goTypes,
		DependencyIndexes: file_conf_upstream_proto_depIdxs,
		EnumInfos:         file_conf_upstream_proto_enumTypes,
		MessageInfos:      file_conf_upstream_proto_msgTypes,
	}.Build()
	File_conf_upstream_proto = out.File
	file_conf_upstream_proto_rawDesc = nil
	file_conf_upstream_proto_goTypes = nil
	file_conf_upstream_proto_depIdxs = nil
}
