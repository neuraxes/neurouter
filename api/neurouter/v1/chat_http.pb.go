// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.9.0
// - protoc             v3.21.12
// source: neurouter/v1/chat.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatChat = "/neurouter.v1.Chat/Chat"

type ChatHTTPServer interface {
	Chat(context.Context, *ChatReq) (*ChatResp, error)
}

func RegisterChatHTTPServer(s *http.Server, srv ChatHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/chat", _Chat_Chat0_HTTP_Handler(srv))
}

func _Chat_Chat0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ChatReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatChat)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Chat(ctx, req.(*ChatReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChatResp)
		return ctx.Result(200, reply)
	}
}

type ChatHTTPClient interface {
	Chat(ctx context.Context, req *ChatReq, opts ...http.CallOption) (rsp *ChatResp, err error)
}

type ChatHTTPClientImpl struct {
	cc *http.Client
}

func NewChatHTTPClient(client *http.Client) ChatHTTPClient {
	return &ChatHTTPClientImpl{client}
}

func (c *ChatHTTPClientImpl) Chat(ctx context.Context, in *ChatReq, opts ...http.CallOption) (*ChatResp, error) {
	var out ChatResp
	pattern := "/v1/chat"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatChat))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
