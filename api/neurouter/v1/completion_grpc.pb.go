// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: neurouter/v1/completion.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Completion_Complete_FullMethodName       = "/neurouter.v1.Completion/Complete"
	Completion_CompleteStream_FullMethodName = "/neurouter.v1.Completion/CompleteStream"
)

// CompletionClient is the client API for Completion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompletionClient interface {
	Complete(ctx context.Context, in *CompletionReq, opts ...grpc.CallOption) (*CompletionResp, error)
	CompleteStream(ctx context.Context, in *CompletionReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompletionResp], error)
}

type completionClient struct {
	cc grpc.ClientConnInterface
}

func NewCompletionClient(cc grpc.ClientConnInterface) CompletionClient {
	return &completionClient{cc}
}

func (c *completionClient) Complete(ctx context.Context, in *CompletionReq, opts ...grpc.CallOption) (*CompletionResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompletionResp)
	err := c.cc.Invoke(ctx, Completion_Complete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *completionClient) CompleteStream(ctx context.Context, in *CompletionReq, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CompletionResp], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Completion_ServiceDesc.Streams[0], Completion_CompleteStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CompletionReq, CompletionResp]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Completion_CompleteStreamClient = grpc.ServerStreamingClient[CompletionResp]

// CompletionServer is the server API for Completion service.
// All implementations must embed UnimplementedCompletionServer
// for forward compatibility.
type CompletionServer interface {
	Complete(context.Context, *CompletionReq) (*CompletionResp, error)
	CompleteStream(*CompletionReq, grpc.ServerStreamingServer[CompletionResp]) error
	mustEmbedUnimplementedCompletionServer()
}

// UnimplementedCompletionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCompletionServer struct{}

func (UnimplementedCompletionServer) Complete(context.Context, *CompletionReq) (*CompletionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedCompletionServer) CompleteStream(*CompletionReq, grpc.ServerStreamingServer[CompletionResp]) error {
	return status.Errorf(codes.Unimplemented, "method CompleteStream not implemented")
}
func (UnimplementedCompletionServer) mustEmbedUnimplementedCompletionServer() {}
func (UnimplementedCompletionServer) testEmbeddedByValue()                    {}

// UnsafeCompletionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompletionServer will
// result in compilation errors.
type UnsafeCompletionServer interface {
	mustEmbedUnimplementedCompletionServer()
}

func RegisterCompletionServer(s grpc.ServiceRegistrar, srv CompletionServer) {
	// If the following call pancis, it indicates UnimplementedCompletionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Completion_ServiceDesc, srv)
}

func _Completion_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompletionServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Completion_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompletionServer).Complete(ctx, req.(*CompletionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Completion_CompleteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CompletionReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CompletionServer).CompleteStream(m, &grpc.GenericServerStream[CompletionReq, CompletionResp]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Completion_CompleteStreamServer = grpc.ServerStreamingServer[CompletionResp]

// Completion_ServiceDesc is the grpc.ServiceDesc for Completion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Completion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neurouter.v1.Completion",
	HandlerType: (*CompletionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Complete",
			Handler:    _Completion_Complete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CompleteStream",
			Handler:       _Completion_CompleteStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "neurouter/v1/completion.proto",
}
