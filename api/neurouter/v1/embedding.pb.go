// Copyright 2024 Neurouter Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: neurouter/v1/embedding.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EmbedReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Model         string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Contents      []*Content             `protobuf:"bytes,3,rep,name=contents,proto3" json:"contents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbedReq) Reset() {
	*x = EmbedReq{}
	mi := &file_neurouter_v1_embedding_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedReq) ProtoMessage() {}

func (x *EmbedReq) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_embedding_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedReq.ProtoReflect.Descriptor instead.
func (*EmbedReq) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_embedding_proto_rawDescGZIP(), []int{0}
}

func (x *EmbedReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EmbedReq) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EmbedReq) GetContents() []*Content {
	if x != nil {
		return x.Contents
	}
	return nil
}

type EmbedResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Model         string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	Embedding     []float32              `protobuf:"fixed32,3,rep,packed,name=embedding,proto3" json:"embedding,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EmbedResp) Reset() {
	*x = EmbedResp{}
	mi := &file_neurouter_v1_embedding_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EmbedResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmbedResp) ProtoMessage() {}

func (x *EmbedResp) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_embedding_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmbedResp.ProtoReflect.Descriptor instead.
func (*EmbedResp) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_embedding_proto_rawDescGZIP(), []int{1}
}

func (x *EmbedResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EmbedResp) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *EmbedResp) GetEmbedding() []float32 {
	if x != nil {
		return x.Embedding
	}
	return nil
}

var File_neurouter_v1_embedding_proto protoreflect.FileDescriptor

const file_neurouter_v1_embedding_proto_rawDesc = "" +
	"\n" +
	"\x1cneurouter/v1/embedding.proto\x12\fneurouter.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x19neurouter/v1/common.proto\"c\n" +
	"\bEmbedReq\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x121\n" +
	"\bcontents\x18\x03 \x03(\v2\x15.neurouter.v1.ContentR\bcontents\"O\n" +
	"\tEmbedResp\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05model\x18\x02 \x01(\tR\x05model\x12\x1c\n" +
	"\tembedding\x18\x03 \x03(\x02R\tembedding2[\n" +
	"\tEmbedding\x12N\n" +
	"\x05Embed\x12\x16.neurouter.v1.EmbedReq\x1a\x17.neurouter.v1.EmbedResp\"\x14\x82\xd3\xe4\x93\x02\x0e:\x01*\"\t/v1/embedB3Z1github.com/neuraxes/neurouter/api/neurouter/v1;v1b\x06proto3"

var (
	file_neurouter_v1_embedding_proto_rawDescOnce sync.Once
	file_neurouter_v1_embedding_proto_rawDescData []byte
)

func file_neurouter_v1_embedding_proto_rawDescGZIP() []byte {
	file_neurouter_v1_embedding_proto_rawDescOnce.Do(func() {
		file_neurouter_v1_embedding_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_neurouter_v1_embedding_proto_rawDesc), len(file_neurouter_v1_embedding_proto_rawDesc)))
	})
	return file_neurouter_v1_embedding_proto_rawDescData
}

var file_neurouter_v1_embedding_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_neurouter_v1_embedding_proto_goTypes = []any{
	(*EmbedReq)(nil),  // 0: neurouter.v1.EmbedReq
	(*EmbedResp)(nil), // 1: neurouter.v1.EmbedResp
	(*Content)(nil),   // 2: neurouter.v1.Content
}
var file_neurouter_v1_embedding_proto_depIdxs = []int32{
	2, // 0: neurouter.v1.EmbedReq.contents:type_name -> neurouter.v1.Content
	0, // 1: neurouter.v1.Embedding.Embed:input_type -> neurouter.v1.EmbedReq
	1, // 2: neurouter.v1.Embedding.Embed:output_type -> neurouter.v1.EmbedResp
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_neurouter_v1_embedding_proto_init() }
func file_neurouter_v1_embedding_proto_init() {
	if File_neurouter_v1_embedding_proto != nil {
		return
	}
	file_neurouter_v1_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_neurouter_v1_embedding_proto_rawDesc), len(file_neurouter_v1_embedding_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_neurouter_v1_embedding_proto_goTypes,
		DependencyIndexes: file_neurouter_v1_embedding_proto_depIdxs,
		MessageInfos:      file_neurouter_v1_embedding_proto_msgTypes,
	}.Build()
	File_neurouter_v1_embedding_proto = out.File
	file_neurouter_v1_embedding_proto_goTypes = nil
	file_neurouter_v1_embedding_proto_depIdxs = nil
}
