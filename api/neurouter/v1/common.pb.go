// Copyright 2024 Neurouter Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v3.21.12
// source: neurouter/v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Modality defines the types of input/output the model can handle.
type Modality int32

const (
	Modality_MODALITY_UNSPECIFIED Modality = 0
	Modality_MODALITY_TEXT        Modality = 1
	Modality_MODALITY_IMAGE       Modality = 2
	Modality_MODALITY_AUDIO       Modality = 3
	Modality_MODALITY_VIDEO       Modality = 4
)

// Enum value maps for Modality.
var (
	Modality_name = map[int32]string{
		0: "MODALITY_UNSPECIFIED",
		1: "MODALITY_TEXT",
		2: "MODALITY_IMAGE",
		3: "MODALITY_AUDIO",
		4: "MODALITY_VIDEO",
	}
	Modality_value = map[string]int32{
		"MODALITY_UNSPECIFIED": 0,
		"MODALITY_TEXT":        1,
		"MODALITY_IMAGE":       2,
		"MODALITY_AUDIO":       3,
		"MODALITY_VIDEO":       4,
	}
)

func (x Modality) Enum() *Modality {
	p := new(Modality)
	*p = x
	return p
}

func (x Modality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Modality) Descriptor() protoreflect.EnumDescriptor {
	return file_neurouter_v1_common_proto_enumTypes[0].Descriptor()
}

func (Modality) Type() protoreflect.EnumType {
	return &file_neurouter_v1_common_proto_enumTypes[0]
}

func (x Modality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Modality.Descriptor instead.
func (Modality) EnumDescriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{0}
}

// Capability defines what the model can do.
type Capability int32

const (
	Capability_CAPABILITY_UNSPECIFIED Capability = 0
	Capability_CAPABILITY_CHAT        Capability = 1
	Capability_CAPABILITY_COMPLETION  Capability = 2
	Capability_CAPABILITY_EMBEDDING   Capability = 3
	Capability_CAPABILITY_TOOL_USE    Capability = 4
)

// Enum value maps for Capability.
var (
	Capability_name = map[int32]string{
		0: "CAPABILITY_UNSPECIFIED",
		1: "CAPABILITY_CHAT",
		2: "CAPABILITY_COMPLETION",
		3: "CAPABILITY_EMBEDDING",
		4: "CAPABILITY_TOOL_USE",
	}
	Capability_value = map[string]int32{
		"CAPABILITY_UNSPECIFIED": 0,
		"CAPABILITY_CHAT":        1,
		"CAPABILITY_COMPLETION":  2,
		"CAPABILITY_EMBEDDING":   3,
		"CAPABILITY_TOOL_USE":    4,
	}
)

func (x Capability) Enum() *Capability {
	p := new(Capability)
	*p = x
	return p
}

func (x Capability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Capability) Descriptor() protoreflect.EnumDescriptor {
	return file_neurouter_v1_common_proto_enumTypes[1].Descriptor()
}

func (Capability) Type() protoreflect.EnumType {
	return &file_neurouter_v1_common_proto_enumTypes[1]
}

func (x Capability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Capability.Descriptor instead.
func (Capability) EnumDescriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{1}
}

type Schema_Type int32

const (
	Schema_TYPE_UNSPECIFIED Schema_Type = 0
	Schema_TYPE_STRING      Schema_Type = 1
	Schema_TYPE_NUMBER      Schema_Type = 2
	Schema_TYPE_INTEGER     Schema_Type = 3
	Schema_TYPE_BOOLEAN     Schema_Type = 4
	Schema_TYPE_ARRAY       Schema_Type = 5
	Schema_TYPE_OBJECT      Schema_Type = 6
)

// Enum value maps for Schema_Type.
var (
	Schema_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_STRING",
		2: "TYPE_NUMBER",
		3: "TYPE_INTEGER",
		4: "TYPE_BOOLEAN",
		5: "TYPE_ARRAY",
		6: "TYPE_OBJECT",
	}
	Schema_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_STRING":      1,
		"TYPE_NUMBER":      2,
		"TYPE_INTEGER":     3,
		"TYPE_BOOLEAN":     4,
		"TYPE_ARRAY":       5,
		"TYPE_OBJECT":      6,
	}
)

func (x Schema_Type) Enum() *Schema_Type {
	p := new(Schema_Type)
	*p = x
	return p
}

func (x Schema_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Schema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_neurouter_v1_common_proto_enumTypes[2].Descriptor()
}

func (Schema_Type) Type() protoreflect.EnumType {
	return &file_neurouter_v1_common_proto_enumTypes[2]
}

func (x Schema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Schema_Type.Descriptor instead.
func (Schema_Type) EnumDescriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{5, 0}
}

type GenerationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of tokens that can be generated.
	MaxTokens *int64 `protobuf:"varint,1,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	// The temperature sampling. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
	Temperature *float32 `protobuf:"fixed32,2,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// The nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
	TopP *float32 `protobuf:"fixed32,3,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// The top_k sampling, where the model considers the results of the top_k most probable tokens.
	TopK *int64 `protobuf:"varint,4,opt,name=top_k,json=topK,proto3,oneof" json:"top_k,omitempty"`
	// Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	FrequencyPenalty *float32 `protobuf:"fixed32,5,opt,name=frequency_penalty,json=frequencyPenalty,proto3,oneof" json:"frequency_penalty,omitempty"`
	// Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.
	PresencePenalty *float32 `protobuf:"fixed32,6,opt,name=presence_penalty,json=presencePenalty,proto3,oneof" json:"presence_penalty,omitempty"`
	// Types that are valid to be assigned to Template:
	//
	//	*GenerationConfig_PresetTemplate
	Template isGenerationConfig_Template `protobuf_oneof:"template"`
	// Types that are valid to be assigned to Grammar:
	//
	//	*GenerationConfig_PresetGrammar
	//	*GenerationConfig_GbnfGrammar
	//	*GenerationConfig_JsonSchema
	Grammar       isGenerationConfig_Grammar `protobuf_oneof:"grammar"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationConfig) Reset() {
	*x = GenerationConfig{}
	mi := &file_neurouter_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationConfig) ProtoMessage() {}

func (x *GenerationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationConfig.ProtoReflect.Descriptor instead.
func (*GenerationConfig) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *GenerationConfig) GetMaxTokens() int64 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *GenerationConfig) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *GenerationConfig) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *GenerationConfig) GetTopK() int64 {
	if x != nil && x.TopK != nil {
		return *x.TopK
	}
	return 0
}

func (x *GenerationConfig) GetFrequencyPenalty() float32 {
	if x != nil && x.FrequencyPenalty != nil {
		return *x.FrequencyPenalty
	}
	return 0
}

func (x *GenerationConfig) GetPresencePenalty() float32 {
	if x != nil && x.PresencePenalty != nil {
		return *x.PresencePenalty
	}
	return 0
}

func (x *GenerationConfig) GetTemplate() isGenerationConfig_Template {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *GenerationConfig) GetPresetTemplate() string {
	if x != nil {
		if x, ok := x.Template.(*GenerationConfig_PresetTemplate); ok {
			return x.PresetTemplate
		}
	}
	return ""
}

func (x *GenerationConfig) GetGrammar() isGenerationConfig_Grammar {
	if x != nil {
		return x.Grammar
	}
	return nil
}

func (x *GenerationConfig) GetPresetGrammar() string {
	if x != nil {
		if x, ok := x.Grammar.(*GenerationConfig_PresetGrammar); ok {
			return x.PresetGrammar
		}
	}
	return ""
}

func (x *GenerationConfig) GetGbnfGrammar() string {
	if x != nil {
		if x, ok := x.Grammar.(*GenerationConfig_GbnfGrammar); ok {
			return x.GbnfGrammar
		}
	}
	return ""
}

func (x *GenerationConfig) GetJsonSchema() string {
	if x != nil {
		if x, ok := x.Grammar.(*GenerationConfig_JsonSchema); ok {
			return x.JsonSchema
		}
	}
	return ""
}

type isGenerationConfig_Template interface {
	isGenerationConfig_Template()
}

type GenerationConfig_PresetTemplate struct {
	PresetTemplate string `protobuf:"bytes,50,opt,name=preset_template,json=presetTemplate,proto3,oneof"`
}

func (*GenerationConfig_PresetTemplate) isGenerationConfig_Template() {}

type isGenerationConfig_Grammar interface {
	isGenerationConfig_Grammar()
}

type GenerationConfig_PresetGrammar struct {
	// Preset grammars, e.g. "text", "json_object", etc.
	PresetGrammar string `protobuf:"bytes,60,opt,name=preset_grammar,json=presetGrammar,proto3,oneof"`
}

type GenerationConfig_GbnfGrammar struct {
	// The GGML BNF grammar definition.
	GbnfGrammar string `protobuf:"bytes,61,opt,name=gbnf_grammar,json=gbnfGrammar,proto3,oneof"`
}

type GenerationConfig_JsonSchema struct {
	// The JSON schema definition.
	JsonSchema string `protobuf:"bytes,62,opt,name=json_schema,json=jsonSchema,proto3,oneof"`
}

func (*GenerationConfig_PresetGrammar) isGenerationConfig_Grammar() {}

func (*GenerationConfig_GbnfGrammar) isGenerationConfig_Grammar() {}

func (*GenerationConfig_JsonSchema) isGenerationConfig_Grammar() {}

type Statistics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Usage         *Statistics_Usage      `protobuf:"bytes,1,opt,name=usage,proto3" json:"usage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Statistics) Reset() {
	*x = Statistics{}
	mi := &file_neurouter_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics) ProtoMessage() {}

func (x *Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics.ProtoReflect.Descriptor instead.
func (*Statistics) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Statistics) GetUsage() *Statistics_Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// Represent a image content
type Image struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*Image_Url
	//	*Image_Data
	Source        isImage_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_neurouter_v1_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{2}
}

func (x *Image) GetSource() isImage_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Image) GetUrl() string {
	if x != nil {
		if x, ok := x.Source.(*Image_Url); ok {
			return x.Url
		}
	}
	return ""
}

func (x *Image) GetData() []byte {
	if x != nil {
		if x, ok := x.Source.(*Image_Data); ok {
			return x.Data
		}
	}
	return nil
}

type isImage_Source interface {
	isImage_Source()
}

type Image_Url struct {
	Url string `protobuf:"bytes,10,opt,name=url,proto3,oneof"`
}

type Image_Data struct {
	Data []byte `protobuf:"bytes,11,opt,name=data,proto3,oneof"`
}

func (*Image_Url) isImage_Source() {}

func (*Image_Data) isImage_Source() {}

// Represent a function tool call content
type FunctionCall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Arguments     string                 `protobuf:"bytes,3,opt,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	mi := &file_neurouter_v1_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{3}
}

func (x *FunctionCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

// Multi-modality content
type Content struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Content:
	//
	//	*Content_Text
	//	*Content_Image
	//	*Content_Thinking
	//	*Content_FunctionCall
	Content       isContent_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_neurouter_v1_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{4}
}

func (x *Content) GetContent() isContent_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Content) GetText() string {
	if x != nil {
		if x, ok := x.Content.(*Content_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *Content) GetImage() *Image {
	if x != nil {
		if x, ok := x.Content.(*Content_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *Content) GetThinking() string {
	if x != nil {
		if x, ok := x.Content.(*Content_Thinking); ok {
			return x.Thinking
		}
	}
	return ""
}

func (x *Content) GetFunctionCall() *FunctionCall {
	if x != nil {
		if x, ok := x.Content.(*Content_FunctionCall); ok {
			return x.FunctionCall
		}
	}
	return nil
}

type isContent_Content interface {
	isContent_Content()
}

type Content_Text struct {
	Text string `protobuf:"bytes,1,opt,name=text,proto3,oneof"`
}

type Content_Image struct {
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

type Content_Thinking struct {
	Thinking string `protobuf:"bytes,3,opt,name=thinking,proto3,oneof"`
}

type Content_FunctionCall struct {
	FunctionCall *FunctionCall `protobuf:"bytes,4,opt,name=function_call,json=functionCall,proto3,oneof"`
}

func (*Content_Text) isContent_Content() {}

func (*Content_Image) isContent_Content() {}

func (*Content_Thinking) isContent_Content() {}

func (*Content_FunctionCall) isContent_Content() {}

type Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          Schema_Type            `protobuf:"varint,1,opt,name=type,proto3,enum=neurouter.v1.Schema_Type" json:"type,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Items         []*Schema              `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
	Properties    map[string]*Schema     `protobuf:"bytes,4,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Required      []string               `protobuf:"bytes,5,rep,name=required,proto3" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_neurouter_v1_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{5}
}

func (x *Schema) GetType() Schema_Type {
	if x != nil {
		return x.Type
	}
	return Schema_TYPE_UNSPECIFIED
}

func (x *Schema) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Schema) GetItems() []*Schema {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Schema) GetProperties() map[string]*Schema {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Schema) GetRequired() []string {
	if x != nil {
		return x.Required
	}
	return nil
}

type Tool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Tool:
	//
	//	*Tool_Function_
	Tool          isTool_Tool `protobuf_oneof:"tool"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tool) Reset() {
	*x = Tool{}
	mi := &file_neurouter_v1_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{6}
}

func (x *Tool) GetTool() isTool_Tool {
	if x != nil {
		return x.Tool
	}
	return nil
}

func (x *Tool) GetFunction() *Tool_Function {
	if x != nil {
		if x, ok := x.Tool.(*Tool_Function_); ok {
			return x.Function
		}
	}
	return nil
}

type isTool_Tool interface {
	isTool_Tool()
}

type Tool_Function_ struct {
	Function *Tool_Function `protobuf:"bytes,1,opt,name=function,proto3,oneof"`
}

func (*Tool_Function_) isTool_Tool() {}

type Statistics_Usage struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	PromptTokens       uint32                 `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	CompletionTokens   uint32                 `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	CachedPromptTokens uint32                 `protobuf:"varint,3,opt,name=cached_prompt_tokens,json=cachedPromptTokens,proto3" json:"cached_prompt_tokens,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Statistics_Usage) Reset() {
	*x = Statistics_Usage{}
	mi := &file_neurouter_v1_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Statistics_Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statistics_Usage) ProtoMessage() {}

func (x *Statistics_Usage) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statistics_Usage.ProtoReflect.Descriptor instead.
func (*Statistics_Usage) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Statistics_Usage) GetPromptTokens() uint32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *Statistics_Usage) GetCompletionTokens() uint32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *Statistics_Usage) GetCachedPromptTokens() uint32 {
	if x != nil {
		return x.CachedPromptTokens
	}
	return 0
}

type Tool_Function struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Parameters    *Schema                `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Tool_Function) Reset() {
	*x = Tool_Function{}
	mi := &file_neurouter_v1_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Tool_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool_Function) ProtoMessage() {}

func (x *Tool_Function) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool_Function.ProtoReflect.Descriptor instead.
func (*Tool_Function) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_common_proto_rawDescGZIP(), []int{6, 0}
}

func (x *Tool_Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tool_Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Tool_Function) GetParameters() *Schema {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_neurouter_v1_common_proto protoreflect.FileDescriptor

const file_neurouter_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x19neurouter/v1/common.proto\x12\fneurouter.v1\"\x84\x04\n" +
	"\x10GenerationConfig\x12\"\n" +
	"\n" +
	"max_tokens\x18\x01 \x01(\x03H\x02R\tmaxTokens\x88\x01\x01\x12%\n" +
	"\vtemperature\x18\x02 \x01(\x02H\x03R\vtemperature\x88\x01\x01\x12\x18\n" +
	"\x05top_p\x18\x03 \x01(\x02H\x04R\x04topP\x88\x01\x01\x12\x18\n" +
	"\x05top_k\x18\x04 \x01(\x03H\x05R\x04topK\x88\x01\x01\x120\n" +
	"\x11frequency_penalty\x18\x05 \x01(\x02H\x06R\x10frequencyPenalty\x88\x01\x01\x12.\n" +
	"\x10presence_penalty\x18\x06 \x01(\x02H\aR\x0fpresencePenalty\x88\x01\x01\x12)\n" +
	"\x0fpreset_template\x182 \x01(\tH\x00R\x0epresetTemplate\x12'\n" +
	"\x0epreset_grammar\x18< \x01(\tH\x01R\rpresetGrammar\x12#\n" +
	"\fgbnf_grammar\x18= \x01(\tH\x01R\vgbnfGrammar\x12!\n" +
	"\vjson_schema\x18> \x01(\tH\x01R\n" +
	"jsonSchemaB\n" +
	"\n" +
	"\btemplateB\t\n" +
	"\agrammarB\r\n" +
	"\v_max_tokensB\x0e\n" +
	"\f_temperatureB\b\n" +
	"\x06_top_pB\b\n" +
	"\x06_top_kB\x14\n" +
	"\x12_frequency_penaltyB\x13\n" +
	"\x11_presence_penalty\"\xd0\x01\n" +
	"\n" +
	"Statistics\x124\n" +
	"\x05usage\x18\x01 \x01(\v2\x1e.neurouter.v1.Statistics.UsageR\x05usage\x1a\x8b\x01\n" +
	"\x05Usage\x12#\n" +
	"\rprompt_tokens\x18\x01 \x01(\rR\fpromptTokens\x12+\n" +
	"\x11completion_tokens\x18\x02 \x01(\rR\x10completionTokens\x120\n" +
	"\x14cached_prompt_tokens\x18\x03 \x01(\rR\x12cachedPromptTokens\";\n" +
	"\x05Image\x12\x12\n" +
	"\x03url\x18\n" +
	" \x01(\tH\x00R\x03url\x12\x14\n" +
	"\x04data\x18\v \x01(\fH\x00R\x04dataB\b\n" +
	"\x06source\"P\n" +
	"\fFunctionCall\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1c\n" +
	"\targuments\x18\x03 \x01(\tR\targuments\"\xb8\x01\n" +
	"\aContent\x12\x14\n" +
	"\x04text\x18\x01 \x01(\tH\x00R\x04text\x12+\n" +
	"\x05image\x18\x02 \x01(\v2\x13.neurouter.v1.ImageH\x00R\x05image\x12\x1c\n" +
	"\bthinking\x18\x03 \x01(\tH\x00R\bthinking\x12A\n" +
	"\rfunction_call\x18\x04 \x01(\v2\x1a.neurouter.v1.FunctionCallH\x00R\ffunctionCallB\t\n" +
	"\acontent\"\xc2\x03\n" +
	"\x06Schema\x12-\n" +
	"\x04type\x18\x01 \x01(\x0e2\x19.neurouter.v1.Schema.TypeR\x04type\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x12*\n" +
	"\x05items\x18\x03 \x03(\v2\x14.neurouter.v1.SchemaR\x05items\x12D\n" +
	"\n" +
	"properties\x18\x04 \x03(\v2$.neurouter.v1.Schema.PropertiesEntryR\n" +
	"properties\x12\x1a\n" +
	"\brequired\x18\x05 \x03(\tR\brequired\x1aS\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.neurouter.v1.SchemaR\x05value:\x028\x01\"\x83\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vTYPE_STRING\x10\x01\x12\x0f\n" +
	"\vTYPE_NUMBER\x10\x02\x12\x10\n" +
	"\fTYPE_INTEGER\x10\x03\x12\x10\n" +
	"\fTYPE_BOOLEAN\x10\x04\x12\x0e\n" +
	"\n" +
	"TYPE_ARRAY\x10\x05\x12\x0f\n" +
	"\vTYPE_OBJECT\x10\x06\"\xc1\x01\n" +
	"\x04Tool\x129\n" +
	"\bfunction\x18\x01 \x01(\v2\x1b.neurouter.v1.Tool.FunctionH\x00R\bfunction\x1av\n" +
	"\bFunction\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x02 \x01(\tR\vdescription\x124\n" +
	"\n" +
	"parameters\x18\x03 \x01(\v2\x14.neurouter.v1.SchemaR\n" +
	"parametersB\x06\n" +
	"\x04tool*s\n" +
	"\bModality\x12\x18\n" +
	"\x14MODALITY_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rMODALITY_TEXT\x10\x01\x12\x12\n" +
	"\x0eMODALITY_IMAGE\x10\x02\x12\x12\n" +
	"\x0eMODALITY_AUDIO\x10\x03\x12\x12\n" +
	"\x0eMODALITY_VIDEO\x10\x04*\x8b\x01\n" +
	"\n" +
	"Capability\x12\x1a\n" +
	"\x16CAPABILITY_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fCAPABILITY_CHAT\x10\x01\x12\x19\n" +
	"\x15CAPABILITY_COMPLETION\x10\x02\x12\x18\n" +
	"\x14CAPABILITY_EMBEDDING\x10\x03\x12\x17\n" +
	"\x13CAPABILITY_TOOL_USE\x10\x04B3Z1github.com/neuraxes/neurouter/api/neurouter/v1;v1b\x06proto3"

var (
	file_neurouter_v1_common_proto_rawDescOnce sync.Once
	file_neurouter_v1_common_proto_rawDescData []byte
)

func file_neurouter_v1_common_proto_rawDescGZIP() []byte {
	file_neurouter_v1_common_proto_rawDescOnce.Do(func() {
		file_neurouter_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_neurouter_v1_common_proto_rawDesc), len(file_neurouter_v1_common_proto_rawDesc)))
	})
	return file_neurouter_v1_common_proto_rawDescData
}

var file_neurouter_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_neurouter_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_neurouter_v1_common_proto_goTypes = []any{
	(Modality)(0),            // 0: neurouter.v1.Modality
	(Capability)(0),          // 1: neurouter.v1.Capability
	(Schema_Type)(0),         // 2: neurouter.v1.Schema.Type
	(*GenerationConfig)(nil), // 3: neurouter.v1.GenerationConfig
	(*Statistics)(nil),       // 4: neurouter.v1.Statistics
	(*Image)(nil),            // 5: neurouter.v1.Image
	(*FunctionCall)(nil),     // 6: neurouter.v1.FunctionCall
	(*Content)(nil),          // 7: neurouter.v1.Content
	(*Schema)(nil),           // 8: neurouter.v1.Schema
	(*Tool)(nil),             // 9: neurouter.v1.Tool
	(*Statistics_Usage)(nil), // 10: neurouter.v1.Statistics.Usage
	nil,                      // 11: neurouter.v1.Schema.PropertiesEntry
	(*Tool_Function)(nil),    // 12: neurouter.v1.Tool.Function
}
var file_neurouter_v1_common_proto_depIdxs = []int32{
	10, // 0: neurouter.v1.Statistics.usage:type_name -> neurouter.v1.Statistics.Usage
	5,  // 1: neurouter.v1.Content.image:type_name -> neurouter.v1.Image
	6,  // 2: neurouter.v1.Content.function_call:type_name -> neurouter.v1.FunctionCall
	2,  // 3: neurouter.v1.Schema.type:type_name -> neurouter.v1.Schema.Type
	8,  // 4: neurouter.v1.Schema.items:type_name -> neurouter.v1.Schema
	11, // 5: neurouter.v1.Schema.properties:type_name -> neurouter.v1.Schema.PropertiesEntry
	12, // 6: neurouter.v1.Tool.function:type_name -> neurouter.v1.Tool.Function
	8,  // 7: neurouter.v1.Schema.PropertiesEntry.value:type_name -> neurouter.v1.Schema
	8,  // 8: neurouter.v1.Tool.Function.parameters:type_name -> neurouter.v1.Schema
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_neurouter_v1_common_proto_init() }
func file_neurouter_v1_common_proto_init() {
	if File_neurouter_v1_common_proto != nil {
		return
	}
	file_neurouter_v1_common_proto_msgTypes[0].OneofWrappers = []any{
		(*GenerationConfig_PresetTemplate)(nil),
		(*GenerationConfig_PresetGrammar)(nil),
		(*GenerationConfig_GbnfGrammar)(nil),
		(*GenerationConfig_JsonSchema)(nil),
	}
	file_neurouter_v1_common_proto_msgTypes[2].OneofWrappers = []any{
		(*Image_Url)(nil),
		(*Image_Data)(nil),
	}
	file_neurouter_v1_common_proto_msgTypes[4].OneofWrappers = []any{
		(*Content_Text)(nil),
		(*Content_Image)(nil),
		(*Content_Thinking)(nil),
		(*Content_FunctionCall)(nil),
	}
	file_neurouter_v1_common_proto_msgTypes[6].OneofWrappers = []any{
		(*Tool_Function_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_neurouter_v1_common_proto_rawDesc), len(file_neurouter_v1_common_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_neurouter_v1_common_proto_goTypes,
		DependencyIndexes: file_neurouter_v1_common_proto_depIdxs,
		EnumInfos:         file_neurouter_v1_common_proto_enumTypes,
		MessageInfos:      file_neurouter_v1_common_proto_msgTypes,
	}.Build()
	File_neurouter_v1_common_proto = out.File
	file_neurouter_v1_common_proto_goTypes = nil
	file_neurouter_v1_common_proto_depIdxs = nil
}
