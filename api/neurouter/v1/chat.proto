syntax = "proto3";

package neurouter.v1;

import "google/api/annotations.proto";
import "neurouter/v1/common.proto";

option go_package = "git.xdea.xyz/Turing/neurouter/api/neurouter/v1;v1";

service Chat {
  rpc Chat(ChatReq) returns (ChatResp) {
    option (google.api.http) = {
      get: "/v1/chat/completion"
    };
  }
  rpc ChatStream(ChatReq) returns (stream ChatResp) {}
}

enum Role {
  SYSTEM = 0;
  USER = 1;
  MODEL = 2;
  TOOL = 3;
}

message ToolCall {
  message FunctionCall {
    string name = 1;
    string arguments = 2;
  }

  string id = 1;
  oneof tool {
    FunctionCall function = 2;
  }
}

message Message {
  // The unique identifier of the message
  string id = 1;
  Role role = 2;
  string name = 3;
  // The multi-modality content
  repeated Content contents = 4;
  // A set of tool calls raised by the message
  repeated ToolCall tool_calls = 5;
  // Indicate the message is a response to a tool call
  string tool_call_id = 6;
  // The reasoning content before final response
  string reasoning_content = 7;
}

message ChatReq {
  string id = 1;
  string model = 2;
  GenerationConfig config = 3;
  repeated Message messages = 4;
  repeated Tool tools = 5;
}

message ChatResp {
  string id = 1;
  Message message = 2;
  Statistics statistics = 3;
}
