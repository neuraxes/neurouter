// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.21.12
// source: neurouter/v1/model.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationModelListModel = "/neurouter.v1.Model/ListModel"

type ModelHTTPServer interface {
	ListModel(context.Context, *ListModelReq) (*ListModelResp, error)
}

func RegisterModelHTTPServer(s *http.Server, srv ModelHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/models", _Model_ListModel0_HTTP_Handler(srv))
}

func _Model_ListModel0_HTTP_Handler(srv ModelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListModelReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationModelListModel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListModel(ctx, req.(*ListModelReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListModelResp)
		return ctx.Result(200, reply)
	}
}

type ModelHTTPClient interface {
	ListModel(ctx context.Context, req *ListModelReq, opts ...http.CallOption) (rsp *ListModelResp, err error)
}

type ModelHTTPClientImpl struct {
	cc *http.Client
}

func NewModelHTTPClient(client *http.Client) ModelHTTPClient {
	return &ModelHTTPClientImpl{client}
}

func (c *ModelHTTPClientImpl) ListModel(ctx context.Context, in *ListModelReq, opts ...http.CallOption) (*ListModelResp, error) {
	var out ListModelResp
	pattern := "/v1/models"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationModelListModel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
