// Copyright 2024 Neurouter Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package neurouter.v1;

option go_package = "github.com/neuraxes/neurouter/api/neurouter/v1;v1";

message GenerationConfig {
  int64 max_tokens = 1;
  float temperature = 2;
  float top_p = 3;
  int64 top_k = 4;
  float frequency_penalty = 5;
  float presence_penalty = 6;

  oneof template {
    string preset_template = 50;
  }

  oneof grammar {
    string preset_grammar = 60;
    string gbnf_grammar = 61;
    string json_schema = 62;
  }
}

message Statistics {
  message Usage {
    int32 prompt_tokens = 1;
    int32 completion_tokens = 2;
  }

  Usage usage = 1;
}

// Modality defines the types of input/output the model can handle.
enum Modality {
  MODALITY_UNSPECIFIED = 0;
  MODALITY_TEXT = 1;
  MODALITY_IMAGE = 2;
  MODALITY_AUDIO = 3;
  MODALITY_VIDEO = 4;
}

// Capability defines what the model can do.
enum Capability {
  CAPABILITY_UNSPECIFIED = 0;
  CAPABILITY_CHAT = 1;
  CAPABILITY_COMPLETION = 2;
  CAPABILITY_EMBEDDING = 3;
  CAPABILITY_TOOL_USE = 4;
}

// Represent a image content
message Image {
  oneof source {
    string url = 10;
    bytes data = 11;
  }
}

// Represent a function tool call content
message FunctionCall {
  string id = 1;
  string name = 2;
  string arguments = 3;
}

// Multi-modality content
message Content {
  oneof content {
    string text = 1;
    Image image = 2;
    string thinking = 3;
    FunctionCall function_call = 4;
  }
}

message Schema {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_STRING = 1;
    TYPE_NUMBER = 2;
    TYPE_INTEGER = 3;
    TYPE_BOOLEAN = 4;
    TYPE_ARRAY = 5;
    TYPE_OBJECT = 6;
  }

  Type type = 1;
  string description = 2;
  repeated Schema items = 3;
  map<string, Schema> properties = 4;
  repeated string required = 5;
}

message Tool {
  message Function {
    string name = 1;
    string description = 2;
    Schema parameters = 3;
  }

  oneof tool {
    Function function = 1;
  }
}