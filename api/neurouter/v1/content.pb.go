// Copyright 2024 Neurouter Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v3.21.12
// source: neurouter/v1/content.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represent a image content
type Image struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	MimeType string                 `protobuf:"bytes,1,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	// Types that are valid to be assigned to Source:
	//
	//	*Image_Url
	//	*Image_Data
	Source        isImage_Source `protobuf_oneof:"source"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Image) Reset() {
	*x = Image{}
	mi := &file_neurouter_v1_content_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_content_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_content_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *Image) GetSource() isImage_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Image) GetUrl() string {
	if x != nil {
		if x, ok := x.Source.(*Image_Url); ok {
			return x.Url
		}
	}
	return ""
}

func (x *Image) GetData() []byte {
	if x != nil {
		if x, ok := x.Source.(*Image_Data); ok {
			return x.Data
		}
	}
	return nil
}

type isImage_Source interface {
	isImage_Source()
}

type Image_Url struct {
	Url string `protobuf:"bytes,10,opt,name=url,proto3,oneof"`
}

type Image_Data struct {
	Data []byte `protobuf:"bytes,11,opt,name=data,proto3,oneof"`
}

func (*Image_Url) isImage_Source() {}

func (*Image_Data) isImage_Source() {}

// Represent a tool use
type ToolUse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Inputs        []*ToolUse_Input       `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolUse) Reset() {
	*x = ToolUse{}
	mi := &file_neurouter_v1_content_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolUse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolUse) ProtoMessage() {}

func (x *ToolUse) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_content_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolUse.ProtoReflect.Descriptor instead.
func (*ToolUse) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_content_proto_rawDescGZIP(), []int{1}
}

func (x *ToolUse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolUse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolUse) GetInputs() []*ToolUse_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Represent a result from tool
type ToolResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Outputs       []*ToolResult_Output   `protobuf:"bytes,2,rep,name=outputs,proto3" json:"outputs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolResult) Reset() {
	*x = ToolResult{}
	mi := &file_neurouter_v1_content_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolResult) ProtoMessage() {}

func (x *ToolResult) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_content_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolResult.ProtoReflect.Descriptor instead.
func (*ToolResult) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_content_proto_rawDescGZIP(), []int{2}
}

func (x *ToolResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolResult) GetOutputs() []*ToolResult_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

// Multi-modality content
type Content struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Index *uint32                `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// Types that are valid to be assigned to Content:
	//
	//	*Content_Text
	//	*Content_Reasoning
	//	*Content_Image
	//	*Content_ToolUse
	//	*Content_ToolResult
	Content       isContent_Content `protobuf_oneof:"content"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Content) Reset() {
	*x = Content{}
	mi := &file_neurouter_v1_content_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Content) ProtoMessage() {}

func (x *Content) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_content_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Content.ProtoReflect.Descriptor instead.
func (*Content) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_content_proto_rawDescGZIP(), []int{3}
}

func (x *Content) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *Content) GetContent() isContent_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Content) GetText() string {
	if x != nil {
		if x, ok := x.Content.(*Content_Text); ok {
			return x.Text
		}
	}
	return ""
}

func (x *Content) GetReasoning() string {
	if x != nil {
		if x, ok := x.Content.(*Content_Reasoning); ok {
			return x.Reasoning
		}
	}
	return ""
}

func (x *Content) GetImage() *Image {
	if x != nil {
		if x, ok := x.Content.(*Content_Image); ok {
			return x.Image
		}
	}
	return nil
}

func (x *Content) GetToolUse() *ToolUse {
	if x != nil {
		if x, ok := x.Content.(*Content_ToolUse); ok {
			return x.ToolUse
		}
	}
	return nil
}

func (x *Content) GetToolResult() *ToolResult {
	if x != nil {
		if x, ok := x.Content.(*Content_ToolResult); ok {
			return x.ToolResult
		}
	}
	return nil
}

type isContent_Content interface {
	isContent_Content()
}

type Content_Text struct {
	Text string `protobuf:"bytes,10,opt,name=text,proto3,oneof"`
}

type Content_Reasoning struct {
	Reasoning string `protobuf:"bytes,11,opt,name=reasoning,proto3,oneof"`
}

type Content_Image struct {
	Image *Image `protobuf:"bytes,12,opt,name=image,proto3,oneof"`
}

type Content_ToolUse struct {
	ToolUse *ToolUse `protobuf:"bytes,13,opt,name=tool_use,json=toolUse,proto3,oneof"`
}

type Content_ToolResult struct {
	ToolResult *ToolResult `protobuf:"bytes,14,opt,name=tool_result,json=toolResult,proto3,oneof"`
}

func (*Content_Text) isContent_Content() {}

func (*Content_Reasoning) isContent_Content() {}

func (*Content_Image) isContent_Content() {}

func (*Content_ToolUse) isContent_Content() {}

func (*Content_ToolResult) isContent_Content() {}

type ToolUse_Input struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Index *uint32                `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// Types that are valid to be assigned to Input:
	//
	//	*ToolUse_Input_Text
	Input         isToolUse_Input_Input `protobuf_oneof:"input"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolUse_Input) Reset() {
	*x = ToolUse_Input{}
	mi := &file_neurouter_v1_content_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolUse_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolUse_Input) ProtoMessage() {}

func (x *ToolUse_Input) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_content_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolUse_Input.ProtoReflect.Descriptor instead.
func (*ToolUse_Input) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_content_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ToolUse_Input) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ToolUse_Input) GetInput() isToolUse_Input_Input {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *ToolUse_Input) GetText() string {
	if x != nil {
		if x, ok := x.Input.(*ToolUse_Input_Text); ok {
			return x.Text
		}
	}
	return ""
}

type isToolUse_Input_Input interface {
	isToolUse_Input_Input()
}

type ToolUse_Input_Text struct {
	Text string `protobuf:"bytes,10,opt,name=text,proto3,oneof"`
}

func (*ToolUse_Input_Text) isToolUse_Input_Input() {}

type ToolResult_Output struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Index *uint32                `protobuf:"varint,1,opt,name=index,proto3,oneof" json:"index,omitempty"`
	// Types that are valid to be assigned to Output:
	//
	//	*ToolResult_Output_Text
	Output        isToolResult_Output_Output `protobuf_oneof:"output"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ToolResult_Output) Reset() {
	*x = ToolResult_Output{}
	mi := &file_neurouter_v1_content_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ToolResult_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolResult_Output) ProtoMessage() {}

func (x *ToolResult_Output) ProtoReflect() protoreflect.Message {
	mi := &file_neurouter_v1_content_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolResult_Output.ProtoReflect.Descriptor instead.
func (*ToolResult_Output) Descriptor() ([]byte, []int) {
	return file_neurouter_v1_content_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ToolResult_Output) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *ToolResult_Output) GetOutput() isToolResult_Output_Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *ToolResult_Output) GetText() string {
	if x != nil {
		if x, ok := x.Output.(*ToolResult_Output_Text); ok {
			return x.Text
		}
	}
	return ""
}

type isToolResult_Output_Output interface {
	isToolResult_Output_Output()
}

type ToolResult_Output_Text struct {
	Text string `protobuf:"bytes,10,opt,name=text,proto3,oneof"`
}

func (*ToolResult_Output_Text) isToolResult_Output_Output() {}

var File_neurouter_v1_content_proto protoreflect.FileDescriptor

const file_neurouter_v1_content_proto_rawDesc = "" +
	"\n" +
	"\x1aneurouter/v1/content.proto\x12\fneurouter.v1\"X\n" +
	"\x05Image\x12\x1b\n" +
	"\tmime_type\x18\x01 \x01(\tR\bmimeType\x12\x12\n" +
	"\x03url\x18\n" +
	" \x01(\tH\x00R\x03url\x12\x14\n" +
	"\x04data\x18\v \x01(\fH\x00R\x04dataB\b\n" +
	"\x06source\"\xaf\x01\n" +
	"\aToolUse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x123\n" +
	"\x06inputs\x18\x03 \x03(\v2\x1b.neurouter.v1.ToolUse.InputR\x06inputs\x1aK\n" +
	"\x05Input\x12\x19\n" +
	"\x05index\x18\x01 \x01(\rH\x01R\x05index\x88\x01\x01\x12\x14\n" +
	"\x04text\x18\n" +
	" \x01(\tH\x00R\x04textB\a\n" +
	"\x05inputB\b\n" +
	"\x06_index\"\xa6\x01\n" +
	"\n" +
	"ToolResult\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x129\n" +
	"\aoutputs\x18\x02 \x03(\v2\x1f.neurouter.v1.ToolResult.OutputR\aoutputs\x1aM\n" +
	"\x06Output\x12\x19\n" +
	"\x05index\x18\x01 \x01(\rH\x01R\x05index\x88\x01\x01\x12\x14\n" +
	"\x04text\x18\n" +
	" \x01(\tH\x00R\x04textB\b\n" +
	"\x06outputB\b\n" +
	"\x06_index\"\x8d\x02\n" +
	"\aContent\x12\x19\n" +
	"\x05index\x18\x01 \x01(\rH\x01R\x05index\x88\x01\x01\x12\x14\n" +
	"\x04text\x18\n" +
	" \x01(\tH\x00R\x04text\x12\x1e\n" +
	"\treasoning\x18\v \x01(\tH\x00R\treasoning\x12+\n" +
	"\x05image\x18\f \x01(\v2\x13.neurouter.v1.ImageH\x00R\x05image\x122\n" +
	"\btool_use\x18\r \x01(\v2\x15.neurouter.v1.ToolUseH\x00R\atoolUse\x12;\n" +
	"\vtool_result\x18\x0e \x01(\v2\x18.neurouter.v1.ToolResultH\x00R\n" +
	"toolResultB\t\n" +
	"\acontentB\b\n" +
	"\x06_indexB3Z1github.com/neuraxes/neurouter/api/neurouter/v1;v1b\x06proto3"

var (
	file_neurouter_v1_content_proto_rawDescOnce sync.Once
	file_neurouter_v1_content_proto_rawDescData []byte
)

func file_neurouter_v1_content_proto_rawDescGZIP() []byte {
	file_neurouter_v1_content_proto_rawDescOnce.Do(func() {
		file_neurouter_v1_content_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_neurouter_v1_content_proto_rawDesc), len(file_neurouter_v1_content_proto_rawDesc)))
	})
	return file_neurouter_v1_content_proto_rawDescData
}

var file_neurouter_v1_content_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_neurouter_v1_content_proto_goTypes = []any{
	(*Image)(nil),             // 0: neurouter.v1.Image
	(*ToolUse)(nil),           // 1: neurouter.v1.ToolUse
	(*ToolResult)(nil),        // 2: neurouter.v1.ToolResult
	(*Content)(nil),           // 3: neurouter.v1.Content
	(*ToolUse_Input)(nil),     // 4: neurouter.v1.ToolUse.Input
	(*ToolResult_Output)(nil), // 5: neurouter.v1.ToolResult.Output
}
var file_neurouter_v1_content_proto_depIdxs = []int32{
	4, // 0: neurouter.v1.ToolUse.inputs:type_name -> neurouter.v1.ToolUse.Input
	5, // 1: neurouter.v1.ToolResult.outputs:type_name -> neurouter.v1.ToolResult.Output
	0, // 2: neurouter.v1.Content.image:type_name -> neurouter.v1.Image
	1, // 3: neurouter.v1.Content.tool_use:type_name -> neurouter.v1.ToolUse
	2, // 4: neurouter.v1.Content.tool_result:type_name -> neurouter.v1.ToolResult
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_neurouter_v1_content_proto_init() }
func file_neurouter_v1_content_proto_init() {
	if File_neurouter_v1_content_proto != nil {
		return
	}
	file_neurouter_v1_content_proto_msgTypes[0].OneofWrappers = []any{
		(*Image_Url)(nil),
		(*Image_Data)(nil),
	}
	file_neurouter_v1_content_proto_msgTypes[3].OneofWrappers = []any{
		(*Content_Text)(nil),
		(*Content_Reasoning)(nil),
		(*Content_Image)(nil),
		(*Content_ToolUse)(nil),
		(*Content_ToolResult)(nil),
	}
	file_neurouter_v1_content_proto_msgTypes[4].OneofWrappers = []any{
		(*ToolUse_Input_Text)(nil),
	}
	file_neurouter_v1_content_proto_msgTypes[5].OneofWrappers = []any{
		(*ToolResult_Output_Text)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_neurouter_v1_content_proto_rawDesc), len(file_neurouter_v1_content_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_neurouter_v1_content_proto_goTypes,
		DependencyIndexes: file_neurouter_v1_content_proto_depIdxs,
		MessageInfos:      file_neurouter_v1_content_proto_msgTypes,
	}.Build()
	File_neurouter_v1_content_proto = out.File
	file_neurouter_v1_content_proto_goTypes = nil
	file_neurouter_v1_content_proto_depIdxs = nil
}
