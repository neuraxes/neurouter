// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/neuraxes/neurouter/internal/biz/chat"
	"github.com/neuraxes/neurouter/internal/biz/model"
	"github.com/neuraxes/neurouter/internal/conf"
	"github.com/neuraxes/neurouter/internal/data/upstream/anthropic"
	"github.com/neuraxes/neurouter/internal/data/upstream/deepseek"
	"github.com/neuraxes/neurouter/internal/data/upstream/google"
	"github.com/neuraxes/neurouter/internal/data/upstream/neurouter"
	"github.com/neuraxes/neurouter/internal/data/upstream/openai"
	"github.com/neuraxes/neurouter/internal/server"
	"github.com/neuraxes/neurouter/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, upstream *conf.Upstream, logger log.Logger) (*kratos.App, func(), error) {
	chatRepoFactory := anthropic.NewAnthropicChatRepoFactory()
	repositoryChatRepoFactory := deepseek.NewDeepSeekChatRepoFactory()
	chatRepoFactory2 := google.NewGoogleChatRepoFactory()
	chatRepoFactory3 := neurouter.NewNeurouterChatRepoFactory()
	chatRepoFactory4 := openai.NewOpenAIChatRepoFactory()
	useCaseImpl := model.NewModelUseCase(upstream, chatRepoFactory, repositoryChatRepoFactory, chatRepoFactory2, chatRepoFactory3, chatRepoFactory4, logger)
	useCase := chat.NewChatUseCase(useCaseImpl, logger)
	routerService := service.NewRouterService(useCase, useCaseImpl, logger)
	grpcServer := server.NewGRPCServer(confServer, routerService, logger)
	httpServer := server.NewHTTPServer(confServer, routerService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
	}, nil
}
